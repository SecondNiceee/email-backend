import { type NextRequest, NextResponse } from "next/server"
import { sendEmail } from "@/lib/email"

// üëá –°–æ–∑–¥–∞—ë–º CORS-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–¥–∏–Ω —Ä–∞–∑
const corsHeaders = {
  "Access-Control-Allow-Origin": "*", // –†–∞–∑—Ä–µ—à–∏—Ç—å –≤—Å–µ–º
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
}

export async function OPTIONS(request: NextRequest) {
  // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º OPTIONS ‚Äî —ç—Ç–æ preflight-–∑–∞–ø—Ä–æ—Å –æ—Ç –±—Ä–∞—É–∑–µ—Ä–∞
  return NextResponse.json(
    {},
    {
      status: 200,
      headers: corsHeaders,
    }
  )
}

export async function POST(request: NextRequest) {
  try {
    const { message, to, subject = "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞" } = await request.json()

    if (!message || !to) {
      return NextResponse.json(
        { error: "Message and recipient email are required" },
        { status: 400, headers: corsHeaders }
      )
    }

    await sendEmail(to, subject, message)

    console.log("Email sent successfully to:", to)

    return NextResponse.json(
      { success: true, message: "Email sent successfully" },
      { headers: corsHeaders }
    )
  } catch (error) {
    console.error("Error sending email:", error)
    return NextResponse.json(
      {
        error: "Failed to send email",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500, headers: corsHeaders }
    )
  }
}